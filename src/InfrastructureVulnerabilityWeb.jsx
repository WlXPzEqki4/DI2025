import React, { useState } from 'react';
import { 
  Globe, Server, Satellite, Factory, 
  Wifi, Cloud, Shield, Radio,
  AlertTriangle, ArrowRight
} from 'lucide-react';

const InfrastructureVulnerabilityWeb = () => {
  const [activeSystem, setActiveSystem] = useState(null);
  const [activeThreats, setActiveThreats] = useState([]);
  const [selectedPath, setSelectedPath] = useState(null);

  const infrastructureSystems = {
    space: {
      icon: Satellite,
      name: 'Space Infrastructure',
      description: 'Satellite-based communication and navigation systems',
      vulnerabilities: ['militarization', 'cyberAttacks', 'disruption'],
      dependencies: ['digital', 'communications'],
      criticalAssets: [
        'GPS Navigation',
        'Satellite Communications',
        'Earth Observation Systems'
      ]
    },
    digital: {
      icon: Server,
      name: 'Digital Infrastructure',
      description: 'Cloud systems and data centers',
      vulnerabilities: ['voltTyphoon', 'cloudCentralization', 'cyberAttacks'],
      dependencies: ['communications', 'energy'],
      criticalAssets: [
        'Data Centers',
        'Cloud Services',
        'Network Infrastructure'
      ]
    },
    communications: {
      icon: Radio,
      name: 'Communications Networks',
      description: 'Telecommunications and data transmission systems',
      vulnerabilities: ['cyberAttacks', 'disruption', 'interference'],
      dependencies: ['energy', 'digital'],
      criticalAssets: [
        'Telecom Networks',
        'Internet Infrastructure',
        'Emergency Communications'
      ]
    },
    energy: {
      icon: Factory,
      name: 'Energy Systems',
      description: 'Power generation and distribution infrastructure',
      vulnerabilities: ['voltTyphoon', 'physicalAttacks', 'disruption'],
      dependencies: ['digital', 'communications'],
      criticalAssets: [
        'Power Plants',
        'Distribution Networks',
        'Control Systems'
      ]
    }
  };

  const threats = {
    voltTyphoon: {
      name: 'Volt Typhoon Operations',
      type: 'STATE_SPONSORED',
      severity: 'CRITICAL',
      description: 'Advanced persistent threat targeting critical infrastructure',
      impacts: [
        'Industrial control system compromise',
        'Data exfiltration',
        'Service disruption'
      ]
    },
    militarization: {
      name: 'Space Militarization',
      type: 'STRATEGIC',
      severity: 'HIGH',
      description: 'Weaponization of space affecting orbital assets',
      impacts: [
        'Satellite disruption',
        'Navigation interference',
        'Communications blackout'
      ]
    },
    cloudCentralization: {
      name: 'Cloud Centralization',
      type: 'SYSTEMIC',
      severity: 'MEDIUM',
      description: 'Risks from centralized cloud infrastructure',
      impacts: [
        'Single point of failure',
        'Data sovereignty issues',
        'Service dependency risks'
      ]
    },
    cyberAttacks: {
      name: 'Autonomous Cyber Attacks',
      type: 'EMERGING',
      severity: 'HIGH',
      description: 'AI-driven cyber warfare targeting multiple systems',
      impacts: [
        'Automated system compromise',
        'Rapid attack propagation',
        'Complex attack patterns'
      ]
    }
  };

  const SystemNode = ({ systemId, system }) => {
    const Icon = system.icon;
    const isActive = activeSystem === systemId;
    const isAffected = activeThreats.some(threat => 
      infrastructureSystems[systemId].vulnerabilities.includes(threat)
    );

    return (
      <div 
        className={`
          p-4 rounded-lg border-2 transition-all duration-300 cursor-pointer
          ${isActive ? 'bg-blue-50 border-blue-500' : 
            isAffected ? 'bg-red-50 border-red-500' :
            'bg-white border-gray-200 hover:border-blue-300'}
        `}
        onClick={() => {
          setActiveSystem(isActive ? null : systemId);
          setActiveThreats([]);
          setSelectedPath(null);
        }}
      >
        <div className="flex items-center gap-3">
          <Icon className={`w-6 h-6 ${
            isActive ? 'text-blue-600' : 
            isAffected ? 'text-red-600' : 
            'text-gray-600'
          }`} />
          <div>
            <h3 className="font-bold">{system.name}</h3>
            <p className="text-sm text-gray-600">{system.description}</p>
          </div>
        </div>

        {isActive && (
          <div className="mt-4 space-y-4 animate-fadeIn">
            <div>
              <h4 className="text-sm font-semibold mb-2">Critical Assets:</h4>
              <div className="grid grid-cols-1 gap-2">
                {system.criticalAssets.map((asset, idx) => (
                  <div key={idx} className="flex items-center gap-2 text-sm">
                    <Shield size={14} className="text-blue-500" />
                    <span>{asset}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const VulnerabilityPath = ({ systemId }) => {
    const system = infrastructureSystems[systemId];
    const relevantThreats = system.vulnerabilities
      .filter(v => threats[v])
      .map(v => ({
        id: v,
        ...threats[v]
      }));

    return (
      <div className="space-y-4">
        {relevantThreats.map((threat) => (
          <div
            key={threat.id}
            className={`
              p-4 rounded-lg border transition-all duration-300 cursor-pointer
              ${activeThreats.includes(threat.id) ? 
                'bg-red-50 border-red-500' : 
                'bg-white border-gray-200 hover:border-red-300'}
            `}
            onClick={() => {
              setActiveThreats(
                activeThreats.includes(threat.id) ?
                activeThreats.filter(t => t !== threat.id) :
                [...activeThreats, threat.id]
              );
            }}
          >
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-semibold">{threat.name}</h4>
              <span className={`
                px-2 py-1 rounded-full text-xs
                ${threat.severity === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                  threat.severity === 'HIGH' ? 'bg-orange-100 text-orange-800' :
                  'bg-yellow-100 text-yellow-800'}
              `}>
                {threat.severity}
              </span>
            </div>
            <p className="text-sm text-gray-600 mb-3">{threat.description}</p>
            {activeThreats.includes(threat.id) && (
              <div className="space-y-2 animate-fadeIn">
                {threat.impacts.map((impact, idx) => (
                  <div key={idx} className="flex items-center gap-2 text-sm">
                    <ArrowRight size={14} className="text-red-500" />
                    <span>{impact}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Infrastructure Vulnerability Web</h1>
        <h2 className="text-xl text-gray-600">
          Mapping Attack Vectors and System Dependencies
        </h2>
      </div> */}

      <div className="grid grid-cols-3 gap-8">
        {/* Systems Column */}
        <div className="space-y-4">
          <h3 className="font-semibold text-lg mb-4">Infrastructure Systems</h3>
          {Object.entries(infrastructureSystems).map(([id, system]) => (
            <SystemNode key={id} systemId={id} system={system} />
          ))}
        </div>

        {/* Vulnerabilities Column */}
        <div className="col-span-2">
          <h3 className="font-semibold text-lg mb-4">Attack Vectors & Impacts</h3>
          {activeSystem ? (
            <VulnerabilityPath systemId={activeSystem} />
          ) : (
            <div className="bg-gray-50 rounded-lg p-6 text-center">
              <AlertTriangle className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-600">
                Select an infrastructure system to explore its vulnerabilities
              </p>
            </div>
          )}
        </div>
      </div>

      {/* <div className="mt-8 p-4 bg-gray-900 text-white rounded-lg">
        <p className="text-center font-semibold">
          "The UAE's critical infrastructure faces interconnected risks requiring resilient defense strategies."
        </p>
      </div> */}
    </div>
  );
};

export default InfrastructureVulnerabilityWeb;